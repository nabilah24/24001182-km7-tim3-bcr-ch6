/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const RegisterLazyImport = createFileRoute('/register')()
const ProfileLazyImport = createFileRoute('/profile')()
const LoginLazyImport = createFileRoute('/login')()
const IndexLazyImport = createFileRoute('/')()
const ManufactureIndexLazyImport = createFileRoute('/manufacture/')()
const StudentCreateLazyImport = createFileRoute('/student/create')()
const StudentIdLazyImport = createFileRoute('/student/$id')()
const StudentEditIdLazyImport = createFileRoute('/student/edit/$id')()

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const ProfileLazyRoute = ProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ManufactureIndexLazyRoute = ManufactureIndexLazyImport.update({
  id: '/manufacture/',
  path: '/manufacture/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/manufacture/index.lazy').then((d) => d.Route),
)

const StudentCreateLazyRoute = StudentCreateLazyImport.update({
  id: '/student/create',
  path: '/student/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/student/create.lazy').then((d) => d.Route),
)

const StudentIdLazyRoute = StudentIdLazyImport.update({
  id: '/student/$id',
  path: '/student/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/student/$id.lazy').then((d) => d.Route))

const StudentEditIdLazyRoute = StudentEditIdLazyImport.update({
  id: '/student/edit/$id',
  path: '/student/edit/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/student/edit/$id.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/student/$id': {
      id: '/student/$id'
      path: '/student/$id'
      fullPath: '/student/$id'
      preLoaderRoute: typeof StudentIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/student/create': {
      id: '/student/create'
      path: '/student/create'
      fullPath: '/student/create'
      preLoaderRoute: typeof StudentCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/manufacture/': {
      id: '/manufacture/'
      path: '/manufacture'
      fullPath: '/manufacture'
      preLoaderRoute: typeof ManufactureIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/student/edit/$id': {
      id: '/student/edit/$id'
      path: '/student/edit/$id'
      fullPath: '/student/edit/$id'
      preLoaderRoute: typeof StudentEditIdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/register': typeof RegisterLazyRoute
  '/student/$id': typeof StudentIdLazyRoute
  '/student/create': typeof StudentCreateLazyRoute
  '/manufacture': typeof ManufactureIndexLazyRoute
  '/student/edit/$id': typeof StudentEditIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/register': typeof RegisterLazyRoute
  '/student/$id': typeof StudentIdLazyRoute
  '/student/create': typeof StudentCreateLazyRoute
  '/manufacture': typeof ManufactureIndexLazyRoute
  '/student/edit/$id': typeof StudentEditIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/login': typeof LoginLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/register': typeof RegisterLazyRoute
  '/student/$id': typeof StudentIdLazyRoute
  '/student/create': typeof StudentCreateLazyRoute
  '/manufacture/': typeof ManufactureIndexLazyRoute
  '/student/edit/$id': typeof StudentEditIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/profile'
    | '/register'
    | '/student/$id'
    | '/student/create'
    | '/manufacture'
    | '/student/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/profile'
    | '/register'
    | '/student/$id'
    | '/student/create'
    | '/manufacture'
    | '/student/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/profile'
    | '/register'
    | '/student/$id'
    | '/student/create'
    | '/manufacture/'
    | '/student/edit/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
  RegisterLazyRoute: typeof RegisterLazyRoute
  StudentIdLazyRoute: typeof StudentIdLazyRoute
  StudentCreateLazyRoute: typeof StudentCreateLazyRoute
  ManufactureIndexLazyRoute: typeof ManufactureIndexLazyRoute
  StudentEditIdLazyRoute: typeof StudentEditIdLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  ProfileLazyRoute: ProfileLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
  StudentIdLazyRoute: StudentIdLazyRoute,
  StudentCreateLazyRoute: StudentCreateLazyRoute,
  ManufactureIndexLazyRoute: ManufactureIndexLazyRoute,
  StudentEditIdLazyRoute: StudentEditIdLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/login",
        "/profile",
        "/register",
        "/student/$id",
        "/student/create",
        "/manufacture/",
        "/student/edit/$id"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/login": {
      "filePath": "login.lazy.jsx"
    },
    "/profile": {
      "filePath": "profile.lazy.jsx"
    },
    "/register": {
      "filePath": "register.lazy.jsx"
    },
    "/student/$id": {
      "filePath": "student/$id.lazy.jsx"
    },
    "/student/create": {
      "filePath": "student/create.lazy.jsx"
    },
    "/manufacture/": {
      "filePath": "manufacture/index.lazy.jsx"
    },
    "/student/edit/$id": {
      "filePath": "student/edit/$id.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
